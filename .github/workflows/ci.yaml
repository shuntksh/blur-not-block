name: Continuous Integration

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      ##
      # Environment setup
      #
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      ##
      # Checkout
      #
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      ##
      # Use pnpm for managing NPM packages and restore from cache if available
      #
      - name: Install pnpm command
        # https://github.com/marketplace/actions/setup-pnpm
        uses: pnpm/action-setup@v2.2.4
        id: pnpm-install
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        # https://github.com/actions/cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm build
    
      - name: Get package name and version
        run: |
          jq -r '.name,.version' package.json > package_info.txt
          echo "PACKAGE_NAME=$(head -n 1 package_info.txt)" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=$(tail -n 1 package_info.txt)" >> $GITHUB_ENV
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.PACKAGE_NAME }}-${{ env.PACKAGE_VERSION }}-${{ env.GITHUB_SHA }}
          release_name: Release ${{ env.PACKAGE_NAME }}-${{ env.PACKAGE_VERSION }}-${{ env.GITHUB_SHA }}
          draft: false
          prerelease: false
      
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/${{ env.PACKAGE_NAME }}-${{ env.PACKAGE_VERSION }}-${{ env.GITHUB_SHA }}.zip
          asset_name: ${{ env.PACKAGE_NAME }}-${{ env.PACKAGE_VERSION }}-${{ env.GITHUB_SHA }}.zip
          asset_content_type: application/zip